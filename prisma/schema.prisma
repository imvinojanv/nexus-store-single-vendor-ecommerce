generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  accounts      Account[]
  orders        Order[]
  sessions      Session[]
}

model Product {
  id                  String      @id @default(cuid())
  sourceId            Int         @unique
  name                String
  description         String
  category            String
  price               Float
  discountPercentage  Float
  stock               Int
  tags                String[]
  warrantyInformation String
  shippingInformation String
  availabilityStatus  String
  barcode             String      @unique
  qrCode              String
  images              String[]
  thumbnail           String
  createdAt           DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt           DateTime    @updatedAt @db.Timestamptz(3)
  orderItems          OrderItem[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
